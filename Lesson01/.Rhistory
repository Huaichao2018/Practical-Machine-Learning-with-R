plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
ThresholdingAlgo <- function(y,lag,threshold,influence) {
signals <- rep(0,length(y))
filteredY <- y[0:lag]
avgFilter <- NULL
stdFilter <- NULL
avgFilter[lag] <- mean(y[0:lag])
stdFilter[lag] <- sd(y[0:lag])
for (i in (lag+1):length(y)){
if (abs(y[i]-avgFilter[i-1]) > threshold*stdFilter[i-1]) {
if (y[i] > avgFilter[i-1]) {
signals[i] <- 1;
} else {
signals[i] <- -1;
}
filteredY[i] <- influence*y[i]+(1-influence)*filteredY[i-1]
} else {
signals[i] <- 0
filteredY[i] <- y[i]
}
avgFilter[i] <- mean(filteredY[(i-lag):i])
stdFilter[i] <- sd(filteredY[(i-lag):i])
}
return(list("signals"=signals,"avgFilter"=avgFilter,"stdFilter"=stdFilter))
}
# Run algo with lag = 30, threshold = 5, influence = 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
#lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
install.packages(quantmod)
install.packages(zoo)
install.packages(xts)
install.packages(quantmod)
install.packages("quantmod")
#Time series features
library(caret)
library(quantmod)
data(GermanCredit)
duration<- GermanCredit$Duration #take the duration column
summary(duration)
library(ggplot2)
ggplot(data=GermanCredit, aes(x=GermanCredit$Duration)) +
geom_density(fill='lightblue') +
geom_rug() +
labs(x='mean Duration')
x= GermanCredit$Duration[600:800]
findpeaks(GermanCredit$Duration,npeaks=3)
findPeaks(GermanCredit$Duration,npeaks=3)
findPeaks(GermanCredit$Duration)
findPeaks(GermanCredit$Duration, 2)
findPeaks(GermanCredit$Duration, 1)
points(p)
p= findPeaks(GermanCredit$Duration, 5)
points(p)
p
p= findPeaks(GermanCredit$Duration, 1)
library(ggplot2)
ggplot(data=GermanCredit, aes(x=GermanCredit$Duration)) +
geom_density(fill='lightblue') +
geom_rug() +
labs(x='mean Duration')
findPeaks()
x= GermanCredit$Duration[600:800]
p= findPeaks(x, 1)
#points(p)
p
p= max(findPeaks(x, 1))
#points(p)
p
#Time series features
library(caret)
data(GermanCredit)
duration<- GermanCredit$Duration #take the duration column
summary(duration)
library(ggplot2)
ggplot(data=GermanCredit, aes(x=GermanCredit$Duration)) +
geom_density(fill='lightblue') +
geom_rug() +
labs(x='mean Duration')
#Creating Bins
# set up boundaries for intervals/bins
breaks <- c(0,10,20,30,40,50,60,70,80)
# specify interval/bin labels
labels <- c("<10", "10-20)", "20-30)", "30-40)", "40-50)", "50-60)", "60-70)", "70-80")
# bucketing data points into bins
bins <- cut(duration, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
#Plotting the bins
plot(bins, main="Frequency", ylab="Duration",col="bisque")
max(bins)
max= max(bins)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
ggplot(lynx, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
ggplot(data = GermanCredit$Duration, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
ggplot(GermanCredit$Duration, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
library(photobiology)
library(ggplot2)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
install.packages(photobiology)
library(photobiology)
library(ggplot2)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
# NOT RUN {
library(photobiology)
library(ggplot2)
# ggplot() methods for spectral objects set a default mapping for x and y.
ggplot(sun.spct) + geom_line() + stat_peaks()
ggplot(sun.spct) + geom_line() + stat_valleys()
ggplot(sun.spct) + geom_line() +
stat_peaks(span = 21, geom = "point", colour = "red") +
stat_peaks(span = 51, geom = "text", colour = "red",
vjust = -0.3, label.fmt = "%3.0f nm")
ggplot(sun.spct, unit.out = "photon") + geom_point() +
stat_peaks(span = 5, geom = "line", colour = "red")
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggpmisc)
ozone.df <- read_csv("ggpmisc.csv", col_types = "cd")
install.packages("photobiology")
install.packages("ggpmisc")
library(photobiology)
library(ggplot2)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggpmisc)
ozone.df <- read_csv("ggpmisc.csv", col_types = "cd")
ozone.df <- mutate(ozone.df, datetime = dmy_hm(date))
ggplot(ozone.df, aes(datetime, o3)) + geom_line() +
stat_peaks(colour = "red", span = 21, ignore_threshold = 0.5) +
stat_peaks(geom = "text", colour = "red", span = 21, ignore_threshold = 0.5,
hjust = -0.1, x.label.fmt = "%H:%M", angle = 90) +
ylim(0, 85)
# NOT RUN {
library(photobiology)
library(ggplot2)
# ggplot() methods for spectral objects set a default mapping for x and y.
ggplot(sun.spct) + geom_line() + stat_peaks()
ggplot(sun.spct) + geom_line() + stat_valleys()
ggplot(sun.spct) + geom_line() +
stat_peaks(span = 21, geom = "point", colour = "red") +
stat_peaks(span = 51, geom = "text", colour = "red",
vjust = -0.3, label.fmt = "%3.0f nm")
ggplot(sun.spct, unit.out = "photon") + geom_point() +
stat_peaks(span = 5, geom = "line", colour = "red")
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
library(mlbench)
#Loading the Data
data(BostonHousing)
#Print the first 5 lines in the dataset
head(BostonHousing)
head(BostonHousing,10)
tail(BostonHousing)
tail(BostonHousing,7)
# Display column names of GermanCredit
library(caret)
data(GermanCredit)
# Display column names of GermanCredit
names(GermanCredit)
str(GermanCredit)
summary(GermanCredit)
#Plot a correlation plot
GermanCredit_Subset=GermanCredit[,1:9]
install.packages("corrplot")
library(corrplot)
correlations = cor(GermanCredit_Subset)
print(correlations)
corrplot(correlations, method="color")
library(mlbench)
data(PimaIndiansDiabetes)
#Assign it to a local variable for further use
PimaIndiansDiabetesData<- PimaIndiansDiabetes
#Display the first five rows
head(PimaIndiansDiabetesData)
#View the structure of the data
str(PimaIndiansDiabetesData)
summary(PimaIndiansDiabetesData)
install.packages("psych")
install.packages("psych")
#Calculate correlations
correlation <- cor(PimaIndiansDiabetesData[,1:4])
#Calculate correlations
correlation <- cor(PimaIndiansDiabetesData[,1:4])
#Round the values to the nearest 2 digit
round(correlation,2)
#Plot the pairs on a plot
pairs(PimaIndiansDiabetesData[,1:4])
# Load library
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +
ylab("Sepal Width") + ggtitle("Diabetes Data Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# summarize the fit
summary(fit)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
3.	Summarize the fit.
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
3.	Summarize the fit.
# summarize the fit
summary(fit)
4.	Make predictions.
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
5.	Summarize the accuracy of the model.
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# load the package
library(caret)
data(GermanCredit)
install.packages('topicmodels')
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
#Build a simple linear regression
model1 <- lm(medv~indus, data = BostonHousing)
require(MASS)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
#Build a simple linear regression
model1 <- lm(medv~indus, data = BostonHousing)
#Build multi variable regression
regression <- lm(medv~crim + indus+rad , data = BostonHousing)
summary(regression)
#Plot the fit
plot(regression)
#Plot the fit
plot(regression)
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +
boxplot + geom_boxplot(aes(fill=diabetes)) +    ylab("Pregnant”) + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +    ylab("Pregnant”) + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
boxplot + geom_boxplot(aes(fill=diabetes)) +  ylab("Pregnant") + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
library(caret)
data(GermanCredit)
head(GermanCredit)
str(GermanCredit)
summary(GermanCredit$Class)
balanced_data <- ROSE(Class ~ ., data  = stagec,seed=3)$data
table(balanced_data$Class)
# Load the dataset
library(mlbench)
data(PimaIndiansDiabetes)
#Assign it to a local variable for further use
PimaIndiansDiabetesData<- PimaIndiansDiabetes
#Display the bar plot with number of values for each of 'pregnant' values
library(ggplot2)
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=pregnant))
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Frequency") + ggtitle("Histogram of pregnant")
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Age") + ggtitle("Histogram of pregnant")
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=age))
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Age") + ggtitle("Histogram of pregnant")
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=age))
plot()
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes))  + ggtitle("Histogram of pregnant")
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
# make predictions
predictions <- predict(fit, GermanCredit_Subset)
# summarize accuracy
rmse <- mean((GermanCredit_Subset$Duration - predictions)^2)
print(rmse)
# Attach the libraries
library(caret)
library(groupdata2)
library(neuralnet)
# Set seed for reproducibility and easier comparison
set.seed(1)
# Load the German Credit dataset
data("GermanCredit")
# Remove the Age column
GermanCredit$Age <- NULL
# Partition with same ratio of each class in all three partitions
partitions <- partition(GermanCredit, p = c(0.6, 0.2), cat_col = "Class")
train_set <- partitions[[1]]
dev_set <- partitions[[2]]
valid_set <- partitions[[3]]
# Find scaling and centering parameters
params <- preProcess(train_set[, 1:6], method=c("center", "scale"))
# Transform the training set
train_set[, 1:6] <- predict(params, train_set[, 1:6])
# Transform the development set
dev_set[, 1:6] <- predict(params, dev_set[, 1:6])
# Transform the validation set
valid_set[, 1:6] <- predict(params, valid_set[, 1:6])
# Train neural network classifier
nn <- neuralnet(Class == "Good" ~ InstallmentRatePercentage + ResidenceDuration + NumberExistingCredits,
train_set, linear.output = FALSE)
# Plot the network with its weights
plot(nn, rep="best")
#########
# Attach neuralnet
library(neuralnet)
# Set seed for reproducibility and easy comparison
set.seed(1)
# Classifying if class is "Good"
nn3 <- neuralnet(Class == "Good" ~ ., train_set[, c(9, 11:20)],
linear.output = FALSE, hidden = c(2,2))
plot(nn3, rep="best")
install.packages("devtools")
#import the function from Github
library(devtools)
# Set the working directory
setwd("C:/R")
data = read.csv("mydata.csv")
data
# Set the working directory
setwd("D:\GitHub\Practical-Machine-Learning-with-R\Lesson01")
data = read.csv("mydata.csv")
data
# Set the working directory
setwd("D:\GitHub\Practical-Machine-Learning-with-R\Lesson01")
# Set the working directory
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01")
data = read.csv("mydata.csv")
data
# Set the working directory
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01")
data = read.csv("mydata.csv")
data
# Set the working directory
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01")
data = read.csv("mydata.csv")
data
# Set the working directory
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01")
data = read.csv("mydata.csv")
data
library(caret)
data(GermanCredit)
write.csv(dataset, "GermanCredit.csv")
install.package(caret)
install.packages(caret)
install.packages("caret")
library(caret)
data(GermanCredit)
write.csv(dataset, "GermanCredit.csv")
write.csv(Germancredit, "GermanCredit.csv")
write.csv(data1, "GermanCredit.csv")
data1= data(GermanCredit)
write.csv(data1, "GermanCredit.csv")
data2 = data(PimaIndiansDiabetes)
install.packages("mlbench")
library(caret)
library(mlbench)
data1= data(GermanCredit)
data2 = data(PimaIndiansDiabetes)
write.csv(data1, "GermanCredit.csv")
write.csv(data2."PimaIndiansDiabetes.csv")
write.csv(data2,"PimaIndiansDiabetes.csv")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
data1<- data(GermanCredit)
write.csv(data1, "GermanCredit.csv")
install.packages("mlbench")
data1<- data(GermanCredit)
data1
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("caret")
data1<- data(GermanCredit)
data1
write.csv(GermanCredit, "GermanCredit.csv")
data2 = data(PimaIndiansDiabetes)
write.csv(PimaIndiansDiabetes,"PimaIndiansDiabetes.csv")
install.packages("caret")
install.packages("caret")
data2 = data(mtcars)
write.csv(mtcars,"mtcars.csv")
data2 = data(sonar)
install.packages("mlbench")
library(caret)
library(mlbench)
data2 = data(sonar)
data2 = data(sonar)
install.packages("mlbench")
install.packages("mlbench")
library(mlbench)
data2 = data(sonar)
write.csv(sonar,"sonar.csv")
install.packages("mlbench")
install.packages("mlbench")
library(mlbench)
data2 = data(sonar)
data2 = data(Sonar)
write.csv(Sonar,"Sonar.csv")
data2 = data(iris)
write.csv(iris,"iris.csv")
data2 = data("BostonHousing")
write.csv(BostonHousing,"BostonHousing.csv")
data2 = data(PimaIndiansDiabetes2)
write.csv(PimaIndiansDiabetes2,"PimaIndiansDiabetes2.csv")
PimaIndiansDiabetes<-read.csv("PimaIndiansDiabetes.csv")
PimaIndiansDiabetes<-read.csv("PimaIndiansDiabetes.csv")
PimaIndiansDiabetesData<- PimaIndiansDiabetes
head(PimaIndiansDiabetesData)
PimaIndiansDiabetes<-read.csv("PimaIndiansDiabetes.csv")
PimaIndiansDiabetesData<- PimaIndiansDiabetes
head(PimaIndiansDiabetesData)
PimaIndiansDiabetes<-read.csv("PimaIndiansDiabetes.csv")
PimaIndiansDiabetesData<- PimaIndiansDiabetes
head(PimaIndiansDiabetesData)
PimaIndiansDiabetes<-read.csv("PimaIndiansDiabetes.csv")
PimaIndiansDiabetesData<- PimaIndiansDiabetes
head(PimaIndiansDiabetesData)
