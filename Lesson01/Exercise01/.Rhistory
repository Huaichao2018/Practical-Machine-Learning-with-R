ylim(-100, 7300)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggpmisc)
ozone.df <- read_csv("ggpmisc.csv", col_types = "cd")
install.packages("photobiology")
install.packages("ggpmisc")
library(photobiology)
library(ggplot2)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggpmisc)
ozone.df <- read_csv("ggpmisc.csv", col_types = "cd")
ozone.df <- mutate(ozone.df, datetime = dmy_hm(date))
ggplot(ozone.df, aes(datetime, o3)) + geom_line() +
stat_peaks(colour = "red", span = 21, ignore_threshold = 0.5) +
stat_peaks(geom = "text", colour = "red", span = 21, ignore_threshold = 0.5,
hjust = -0.1, x.label.fmt = "%H:%M", angle = 90) +
ylim(0, 85)
# NOT RUN {
library(photobiology)
library(ggplot2)
# ggplot() methods for spectral objects set a default mapping for x and y.
ggplot(sun.spct) + geom_line() + stat_peaks()
ggplot(sun.spct) + geom_line() + stat_valleys()
ggplot(sun.spct) + geom_line() +
stat_peaks(span = 21, geom = "point", colour = "red") +
stat_peaks(span = 51, geom = "text", colour = "red",
vjust = -0.3, label.fmt = "%3.0f nm")
ggplot(sun.spct, unit.out = "photon") + geom_point() +
stat_peaks(span = 5, geom = "line", colour = "red")
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
stat_peaks(mapping = NULL, data = GermanCredit$Duration, geom = "point", span = 5,
ignore_threshold = 0, strict = FALSE, label.fmt = "%.4g",
x.label.fmt = NULL, y.label.fmt = label.fmt, position = "identity",
na.rm = FALSE, show.legend = FALSE, inherit.aes = TRUE, ...)
ggplot(GermanCredit, as.numeric = FALSE) + geom_line() +
stat_peaks(colour = "red") +
stat_peaks(geom = "text", colour = "red", vjust = -0.5) +
ylim(-100, 7300)
library(mlbench)
#Loading the Data
data(BostonHousing)
#Print the first 5 lines in the dataset
head(BostonHousing)
head(BostonHousing,10)
tail(BostonHousing)
tail(BostonHousing,7)
# Display column names of GermanCredit
library(caret)
data(GermanCredit)
# Display column names of GermanCredit
names(GermanCredit)
str(GermanCredit)
summary(GermanCredit)
#Plot a correlation plot
GermanCredit_Subset=GermanCredit[,1:9]
install.packages("corrplot")
library(corrplot)
correlations = cor(GermanCredit_Subset)
print(correlations)
corrplot(correlations, method="color")
library(mlbench)
data(PimaIndiansDiabetes)
#Assign it to a local variable for further use
PimaIndiansDiabetesData<- PimaIndiansDiabetes
#Display the first five rows
head(PimaIndiansDiabetesData)
#View the structure of the data
str(PimaIndiansDiabetesData)
summary(PimaIndiansDiabetesData)
install.packages("psych")
install.packages("psych")
#Calculate correlations
correlation <- cor(PimaIndiansDiabetesData[,1:4])
#Calculate correlations
correlation <- cor(PimaIndiansDiabetesData[,1:4])
#Round the values to the nearest 2 digit
round(correlation,2)
#Plot the pairs on a plot
pairs(PimaIndiansDiabetesData[,1:4])
# Load library
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +
ylab("Sepal Width") + ggtitle("Diabetes Data Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# summarize the fit
summary(fit)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
3.	Summarize the fit.
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
3.	Summarize the fit.
# summarize the fit
summary(fit)
4.	Make predictions.
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
5.	Summarize the accuracy of the model.
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# load the package
library(caret)
data(GermanCredit)
install.packages('topicmodels')
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
#Build a simple linear regression
model1 <- lm(medv~indus, data = BostonHousing)
require(MASS)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
#Build a simple linear regression
model1 <- lm(medv~indus, data = BostonHousing)
#Build multi variable regression
regression <- lm(medv~crim + indus+rad , data = BostonHousing)
summary(regression)
#Plot the fit
plot(regression)
#Plot the fit
plot(regression)
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +
boxplot + geom_boxplot(aes(fill=diabetes)) +    ylab("Pregnant”) + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
library(ggplot2)
boxplot <- ggplot(data=PimaIndiansDiabetesData, aes(x=diabetes, y=pregnant))
boxplot + geom_boxplot(aes(fill=diabetes)) +    ylab("Pregnant”) + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
boxplot + geom_boxplot(aes(fill=diabetes)) +  ylab("Pregnant") + ggtitle("Diabetes Data Boxplot") + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
library(caret)
data(GermanCredit)
head(GermanCredit)
str(GermanCredit)
summary(GermanCredit$Class)
balanced_data <- ROSE(Class ~ ., data  = stagec,seed=3)$data
table(balanced_data$Class)
# Load the dataset
library(mlbench)
data(PimaIndiansDiabetes)
#Assign it to a local variable for further use
PimaIndiansDiabetesData<- PimaIndiansDiabetes
#Display the bar plot with number of values for each of 'pregnant' values
library(ggplot2)
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=pregnant))
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Frequency") + ggtitle("Histogram of pregnant")
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Age") + ggtitle("Histogram of pregnant")
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=age))
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes)) +
xlab("pregnant") +  ylab("Age") + ggtitle("Histogram of pregnant")
barplot <- ggplot(data= PimaIndiansDiabetesData, aes(x=age))
plot()
barplot + geom_histogram(binwidth=0.2, color="black", aes(fill=diabetes))  + ggtitle("Histogram of pregnant")
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
# summarize accuracy
table(predictions, GermanCredit_Subset$Class)
# make predictions
predictions <- predict(fit, GermanCredit_Subset)
# summarize accuracy
rmse <- mean((GermanCredit_Subset$Duration - predictions)^2)
print(rmse)
# Attach the libraries
library(caret)
library(groupdata2)
library(neuralnet)
# Set seed for reproducibility and easier comparison
set.seed(1)
# Load the German Credit dataset
data("GermanCredit")
# Remove the Age column
GermanCredit$Age <- NULL
# Partition with same ratio of each class in all three partitions
partitions <- partition(GermanCredit, p = c(0.6, 0.2), cat_col = "Class")
train_set <- partitions[[1]]
dev_set <- partitions[[2]]
valid_set <- partitions[[3]]
# Find scaling and centering parameters
params <- preProcess(train_set[, 1:6], method=c("center", "scale"))
# Transform the training set
train_set[, 1:6] <- predict(params, train_set[, 1:6])
# Transform the development set
dev_set[, 1:6] <- predict(params, dev_set[, 1:6])
# Transform the validation set
valid_set[, 1:6] <- predict(params, valid_set[, 1:6])
# Train neural network classifier
nn <- neuralnet(Class == "Good" ~ InstallmentRatePercentage + ResidenceDuration + NumberExistingCredits,
train_set, linear.output = FALSE)
# Plot the network with its weights
plot(nn, rep="best")
#########
# Attach neuralnet
library(neuralnet)
# Set seed for reproducibility and easy comparison
set.seed(1)
# Classifying if class is "Good"
nn3 <- neuralnet(Class == "Good" ~ ., train_set[, c(9, 11:20)],
linear.output = FALSE, hidden = c(2,2))
plot(nn3, rep="best")
install.packages("devtools")
#import the function from Github
library(devtools)
# Attaching neuralnet
library(neuralnet)
# Set seed for reproducibility and easier comparison
set.seed(1)
# Classifying if class is "Good"
nn1 <- neuralnet(Class == "Good" ~ Duration + Amount,
train_set, linear.output = FALSE)
plot(nn1, rep="best", fontsize = 10)
# Find scaling and centering parameters for the first 6 columns
params <- preProcess(train_set[, 1:6], method=c("center", "scale"))
library(mlbench)
# load the dataset PimaIndiansDiabetes
data(PimaIndiansDiabetes)
# view data
summary(PimaIndiansDiabetes [,1:2])
The output is as follows:
pregnant         glucose
# view data
summary(PimaIndiansDiabetes [,1:2])
# perform center operation to the dataset
params <- preProcess(PimaIndiansDiabetes[,1:2],
method=c("center"))
params
library(caret)
library(mlbench)
# load the dataset PimaIndiansDiabetes
data(PimaIndiansDiabetes)
# view data
summary(PimaIndiansDiabetes [,1:2])
# perform center operation to the dataset
params <- preProcess(PimaIndiansDiabetes[,1:2],
method=c("center"))
params
# transform the dataset using the parameters
new_dataset <- predict(params, PimaIndiansDiabetes[,1:2])
The predict() function
# summarize the transformed dataset
summary(new_dataset)
# perform center operation to the dataset
params <- preProcess(PimaIndiansDiabetes[,1:2],
method=c("center"))
print(params)
# load the dataset PimaIndiansDiabetes
data(PimaIndiansDiabetes)
# view data
summary(PimaIndiansDiabetes [,1:2])
# perform center operation to the dataset
params <- preProcess(PimaIndiansDiabetes[,1:2],
method=c("range"))
print(params)
# view data
summary(PimaIndiansDiabetes [,1:2])
# perform center operation to the dataset
params <- preProcess(PimaIndiansDiabetes[,1:2],
method=c("scale"))
print(params)
tail(BostonHousing)
install.packages("mlbench")
tail(BostonHousing)
install.packages("caret")
data(BostonHousing)
tail(BostonHousing)
install.packages("mlbench")
data(BostonHousing)
data("BostonHousing")
data(package = .packages(all.available = TRUE))
data("BostonHousing")
data(BostonHousing)
data(BostonHousing)
library(mlbench)
data(package = .packages(all.available = TRUE))
data(BostonHousing)
tail(BostonHousing)
tail(BostonHousing,7)
library(caret)
data(GermanCredit)
#
GermanCredit_Subset=GermanCredit[,1:10]
fit <- lda(Class~., data=GermanCredit_Subset)
summary(fit)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
table(predictions, GermanCredit_Subset$Class)
The output is as follows:
predictions Bad Good
library(caret) # GermanCredit
library(groupdata2) # partition()
data("GermanCredit")
GermanCredit$Age <- NULL
partitions <- partition(GermanCredit, p = c(0.6, 0.2), cat_col = "Class")
train_set <- partitions[[1]]
dev_set <- partitions[[2]]
valid_set <- partitions[[3]]
6.	Inspect the class counts from the training set.
train_set
summary(train_set)
count(train_set)
# Count the number of observations from each class
# in the training and test sets.
train_counts_equal <- table(train_set_equal$Class)
dev_counts_equal <- table(dev_set_equal$Class)
valid_counts_equal <- table(valid_set_equal$Class)
# Count the number of observations from each class
# in the training and test sets.
train_counts_equal <- table(train_set$Class)
dev_counts_equal <- table(dev_set$Class)
valid_counts_equal <- table(valid_set$Class)
# Count the number of observations from each class
# in the training and test sets.
train_counts<- table(train_set$Class)
dev_counts <- table(dev_set$Class)
valid_counts <- table(valid_set$Class)
train_counts
dev_counts
valid_counts
library(mlbench)
data(PimaIndiansDiabetes)
GermanCredit_subset <- GermanCredit[,1:10]
data(PimaIndiansDiabetes)
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:10]
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:8]
library(randomForest)
random_forest = randomForest(Class~., data=PimaIndiansDiabetes_subset)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes_subset)
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:6]
library(randomForest)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes_subset)
PimaIndiansDiabetes_subset
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:8]
PimaIndiansDiabetes_subset
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:9]
PimaIndiansDiabetes_subset
library(randomForest)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes_subset)
importance(random_forest)
varImp(random_forest)
library(caret)
data(PimaIndiansDiabetes)
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,1:9]
PimaIndiansDiabetes_subset
library(randomForest)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes_subset)
importance(random_forest)
varImp(random_forest)
PimaIndiansDiabetes_subset <- PimaIndiansDiabetes[,0:9]
library(randomForest)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes_subset)
importance(random_forest)
varImp(random_forest)
data(PimaIndiansDiabetes)
library(randomForest)
random_forest = randomForest(diabetes~., data=PimaIndiansDiabetes)
importance(random_forest)
varImp(random_forest)
data(PimaIndiansDiabetes)
params <- preProcess(PimaIndiansDiabetes, method=c("center", "scale", "pca"))
library(mlbench)
data(PimaIndiansDiabetes)
params <- preProcess(PimaIndiansDiabetes, method=c("center", "scale", "pca"))
library(caret)
data(PimaIndiansDiabetes)
params <- preProcess(PimaIndiansDiabetes, method=c("center", "scale", "pca"))
# perform pca on the dataset using the parameters
new_dataset <- predict(params, PimaIndiansDiabetes)
summary(new_dataset)
set.seed(2)
imbalance_data <- twoClassSim(1000, intercept = -15, linearVars = 5)
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE)
ctrl$sampling <- "smote"
smote_fit <- train(Class ~ .,
data = imbalance_data,
method = "gbm",
verbose = FALSE,
metric = "ROC",
trControl = ctrl)
smote_fit
head(PimaIndiansDiabetes)
str(PimaIndiansDiabetes)
BostonHousing <-read.csv("BostonHousing.csv")
data(BostonHousing)
library(mlbench)
data(BostonHousing)
2.	Build a regression model using multiple variables.
regression <- lm(medv~crim + indus+rad , data = BostonHousing)
regression(BostonHousing)
summary(regression)
#Plot the fit
plot(regression)
library(caret)
library(mlbench)
data(PimaIndiansDiabetes)
age<-PimaIndiansDiabetes$age
summary(age)
breaks <- c(0,10,20,30,40,50,60,70,80)
labels <- c("<10", "10-20", "20-30", "30-40", "40-50", "50-60", "60-70", "70-80")
bins <- cut(age, breaks, include.lowest = T, right=FALSE, labels=labels)
summary(bins)
plot(bins, main="Binning for Age",  ylab="Total Count",col="bisque",xlab="Age")
# load the package
library(caret)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
library(mlbanch)
data(GermanCredit)
library(mlbench)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# load the package
library(caret)
library(mlbench)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# fit model
fit <- predict.lda(Class~., data=GermanCredit_Subset)
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
library(MASS)
data(GermanCredit)
#Subset the data
GermanCredit_Subset=GermanCredit[,1:10]
# fit model
fit <- lda(Class~., data=GermanCredit_Subset)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, GermanCredit_Subset[,1:10])$class
table(predictions, GermanCredit_Subset$Class)
# make predictions
predictions <- predict(fit, GermanCredit_Subset)
rmse <- mean((GermanCredit_Subset$Duration - predictions)^2)
print(rmse)
# Set the working directory
setwd("C:/R")
data = read.csv("mydata.csv")
data
data['Col1']
cbind(data,Col4=c(1,2,3,4))
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01/Exercise02")
data['Col1']
cbind(data,Col4=c(1,2,3,4))
rbind(data,list(1,2,3))
data = read.csv("mydata.csv")
data = read.csv("mydata.csv")
setwd("D:/GitHub/Practical-Machine-Learning-with-R/Lesson01/Exercise01")
data = read.csv("mydata.csv")
data
data['Col1']
